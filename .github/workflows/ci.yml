name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check documentation
      run: cargo doc --no-deps --document-private-items --all-features

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache cargo dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run unit tests - crypto
      run: "cargo test --test mod unit::crypto:: --verbose"

    - name: Run unit tests - messages
      run: "cargo test --test mod unit::messages:: --verbose"

    - name: Run unit tests - network
      run: "cargo test --test mod unit::network:: --verbose"

    - name: Run unit tests - display
      run: "cargo test --test mod unit::display:: --verbose"

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run integration tests
      run: "cargo test --test mod integration:: --verbose"
      timeout-minutes: 10

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run DoS protection tests
      run: "cargo test --test mod security::dos_protection:: --verbose"

    - name: Run error handling tests
      run: "cargo test --test mod security::error_handling:: --verbose"

    - name: Run security audit
      run: |
        cargo install cargo-audit
        cargo audit

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run performance tests
      run: "cargo test --test mod performance:: --verbose --release"
      timeout-minutes: 15

  # Cross-platform Testing
  cross-platform:
    name: Cross-platform Tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run core tests
      run: cargo test --lib --verbose

  # Coverage Report
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Generate coverage report
      run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: cobertura.xml
        fail_ci_if_error: false

  # Final validation
  all-tests:
    name: All Tests
    runs-on: ubuntu-latest
    needs: [quality, unit-tests, integration-tests, security-tests, performance-tests, cross-platform]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run complete test suite
      run: cargo test --all-features --verbose 